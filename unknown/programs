url(r'^hello/', HelloView.as_view()),
    url(r'^add/', Addition.as_view()),
    url(r'^sub/', Subtraction.as_view()),
    url(r'^mul/', Multiplication.as_view()),
    url(r'^div/', Division.as_view()),
    url(r'^big/', Greater.as_view()),
    url(r'^Prim/', Primenumber.as_view()),
    url(r'^pal/', Palindrome.as_view()),
    url(r'^fib/', Fibonacci.as_view()),
def helloWorld(request):
    template = loader.get_template('index.html')
    context = {'name': "banglore",'climate':"cool",'description':"and bestplace to live"}
    return HttpResponse(template.render(context, request))

class HelloView(View):
    def get(self, request, *args, **kwargs):
        return HttpResponse("I am in hellow view")
        
class Addition(View):
    def get(self, request, *args, **kwargs):
        a=10
        b=20
        c=a+b
        return HttpResponse(c)
       
class Subtraction(View):
    def get(self, request, *args, **kwargs):
        a=20
        b=10
        c=a-b
        return HttpResponse(c)
    
class Multiplication(View):
    def get(self, request, *args, **kwargs):
        a=20
        b=10
        c=a*b
        return HttpResponse(c)
    
class Division(View):
    def get(self, request, *args, **kwargs):
        a=20
        b=10
        c=a/b
        return HttpResponse(c)

class Greater(View):
    def get(self, request, *args, **kwargs):
        a=10
        b=20
        if a>b:
            d="a is greater"
        else:
            d="b is greater"
        return HttpResponse(d)        

class Primenumber(View):
    def get(self, request, *args, **kwargs):
        num=int(raw_input("Enter a number:"))
        if num > 1:
            for i in range(2,num):
                if(num%i)==0:
                    z = (num,"is not a primenumber")
                    break
        else:
            z = (num,"is a primenumber")
        return HttpResponse(z)        
    
class Palindrome(View):
    def get(self, request, *args, **kwargs):
        num=raw_input("Enter a number:")
        try:
            val=int(num)
            if num==str(num)[::-1]:
                z = ("The given number is palindrome")
            else:
                z = ("The given number is not palindrome")
        except ValueError:
            z = ("That's not a valid number,Try Again")
        return HttpResponse(z)       
 
class Fibonacci(View):
    def get(self, request, *args, **kwargs):
        def fibonacci(n):
            if(n<=1):
                return(n)
            else:
                return(fibonacci(n-1)+fibonacci(n-2))
        n=int(input("Enter number of terms:"))
        z = ("fibonacci sequence:")
        for i in range(n):
            z = fibonacci(i)
        return HttpResponse(z)
